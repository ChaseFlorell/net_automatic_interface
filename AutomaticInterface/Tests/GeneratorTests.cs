using AutomaticInterface;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Testing;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;
using AutomaticInterfaceAttribute;
using VerifyCS = Tests.CSharpSourceGeneratorVerifier<AutomaticInterface.AutomaticInterfaceGenerator>;

namespace Tests
{
    public class GeneratorTests
    {
        ImmutableArray<string> references = AppDomain.CurrentDomain.GetAssemblies()
                       .Where(assembly => !assembly.IsDynamic)
                       .Select(assembly => assembly.Location)
            .ToImmutableArray();

        [Fact]
        public async Task TestNoAttribute()
        {


            var code = @"
class C { }
";
            await new VerifyCS.Test
            {
                TestState =
                {
                    Sources = { code },
                },
            }.RunAsync();

        }


        [Fact]
        public async Task GeneratesEmptyInterface()
        {

            var code = @"
using AutomaticInterfaceAttribute;

namespace AutomaticInterfaceExample
{
    [GenerateAutomaticInterface]
    class DemoClass
    {
    }
}
";

            var expected = @"﻿//--------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using AutomaticInterfaceAttribute;

namespace AutomaticInterfaceExample
{
    [GeneratedCode(""AutomaticInterface"", """")]
    public interface IDemoClass
    {
            }
}";
            var tester = new VerifyCS.Test
            {
                TestState =
    {
        Sources = { code },
        GeneratedSources =
        {
            (typeof(AutomaticInterfaceGenerator), "IDemoClass.cs", SourceText.From(expected, Encoding.UTF8, SourceHashAlgorithm.Sha1)),
        },
    },
            };

            tester.ReferenceAssemblies = ReferenceAssemblies.Net.Net50;
            tester.ReferenceAssemblies.AddAssemblies(references);

            tester.ExpectedDiagnostics.Add(new DiagnosticResult("AutomaticInterface", DiagnosticSeverity.Info));
            tester.TestState.AdditionalReferences.Add(typeof(GenerateAutomaticInterfaceAttribute).Assembly);
            await tester.RunAsync();
        }

        [Fact]
        public void GeneratesStringPropertyInterface()
        {

            var source = @"
using AutomaticInterfaceAttribute;

namespace AutomaticInterfaceExample
{
    [GenerateAutomaticInterface]
    class DemoClass
    {
        public string Hello { get; set; }
    }
}
";
            var generatorDiagnostics = GeneratorTestFactory.RunGenerator(source);
            Assert.False(generatorDiagnostics.Any(x => x.Severity == DiagnosticSeverity.Error));
        }

        [Fact]
        public void GeneratesStringPropertySetOnlyInterface()
        {

            var source = @"
using AutomaticInterfaceAttribute;

namespace AutomaticInterfaceExample
{
    [GenerateAutomaticInterface]
    class DemoClass
    {
        string _hello;
        public string Hello { set => _hello = value; }
    }
}
";
            var generatorDiagnostics = GeneratorTestFactory.RunGenerator(source);
            Assert.False(generatorDiagnostics.Any(x => x.Severity == DiagnosticSeverity.Error), string.Join("\n", generatorDiagnostics));
        }

        [Fact]
        public void GeneratesStringPropertyGetOnlyInterface()
        {

            var source = @"
using AutomaticInterfaceAttribute;

namespace AutomaticInterfaceExample
{
    [GenerateAutomaticInterface]
    class DemoClass
    {
        public string Hello { get; }
    }
}
";
            var generatorDiagnostics = GeneratorTestFactory.RunGenerator(source);
            Assert.False(generatorDiagnostics.Any(x => x.Severity == DiagnosticSeverity.Error));
        }
    }
}
